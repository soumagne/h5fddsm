cmake_minimum_required (VERSION 2.8)
PROJECT (H5FDdsm C CXX)

#-----------------------------------------------------------------------------
# Variable naming convention
#-----------------------------------------------------------------------------

# Inside CMakeLists files for the project, variable names use H5FDdsm_XXX
#
# Variables exported to other projects and user visible options are H5FD_DSM_XXX
#

#-----------------------------------------------------------------------------
# Version information 
#-----------------------------------------------------------------------------
SET (H5FDdsm_VERS_MAJOR   "0")
SET (H5FDdsm_VERS_MINOR   "9")
SET (H5FDdsm_VERS_RELEASE "7")
SET (H5FDdsm_PACKAGE "h5fddsm")
SET (H5FDdsm_PACKAGE_NAME "H5FDdsm")
SET (H5FDdsm_PACKAGE_VERSION "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}.${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_VERSION_MAJOR "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}")
SET (H5FDdsm_PACKAGE_VERSION_MINOR "${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_STRING "${H5FDdsm_PACKAGE_NAME} ${H5FDdsm_PACKAGE_VERSION}")
SET (H5FDdsm_PACKAGE_TARNAME "h5fddsm")

#-----------------------------------------------------------------------------
# Setup install and output Directories
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_INSTALL_BIN_DIR)
  SET (H5FD_DSM_INSTALL_BIN_DIR bin)
ENDIF (NOT H5FD_DSM_INSTALL_BIN_DIR)
IF (NOT H5FD_DSM_INSTALL_LIB_DIR)
  SET (H5FD_DSM_INSTALL_LIB_DIR lib)
ENDIF (NOT H5FD_DSM_INSTALL_LIB_DIR)
IF (NOT H5FD_DSM_INSTALL_INCLUDE_DIR)
  SET (H5FD_DSM_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
ENDIF (NOT H5FD_DSM_INSTALL_INCLUDE_DIR)
IF (NOT H5FD_DSM_INSTALL_DATA_DIR)
  SET (H5FD_DSM_INSTALL_DATA_DIR share)
ENDIF (NOT H5FD_DSM_INSTALL_DATA_DIR)

IF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
  )
  SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
  )
  SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
  )
  SET (CMAKE_Fortran_MODULE_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin/fortran CACHE PATH "Single Directory for all fortran modules."
  )
  SET(H5FD_DSM_LIB_DEPENDENCIES 
    hdf5 
  )
ENDIF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)

#-----------------------------------------------------------------------------
# Targets built within this project are exported at Install time for use
# by other projects using FindH5FDdsm. 
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXPORTED_TARGETS)
  SET (H5FD_DSM_EXPORTED_TARGETS "H5FDdsm-targets")
ENDIF (NOT H5FD_DSM_EXPORTED_TARGETS)

#-----------------------------------------------------------------------------
# Choose static or shared libraries.
#-----------------------------------------------------------------------------
OPTION(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
IF(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 1)
ELSE(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 0)
ENDIF(BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Choose to use thread debug or not.
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_DEBUG_SYNCED "Enable synchronization of debug messages using thread locking." OFF)

#-----------------------------------------------------------------------------
# Choose to enable global debug or not.
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_DEBUG_GLOBAL "Turn on all debug messages." OFF)

#-----------------------------------------------------------------------------
# Choose to build steering API or not.
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_BUILD_STEERING "Build H5FDdsm steering functionalities." OFF)
IF(H5FD_DSM_BUILD_STEERING)
  SET(H5FD_DSM_HAVE_STEERING TRUE)
ENDIF(H5FD_DSM_BUILD_STEERING)

#-----------------------------------------------------------------------------
# Choose to build DMAPP communicator or not.
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_BUILD_DMAPP "Build DMAPP communicator." OFF)
IF(H5FD_DSM_BUILD_DMAPP)
  SET(H5FD_DSM_HAVE_DMAPP TRUE)
ENDIF(H5FD_DSM_BUILD_DMAPP)

#-------------------------------------------------------------------------------
MACRO (SET_LIB_OPTIONS libtarget)
  IF (BUILD_SHARED_LIBS)
    IF (WIN32)
      SET (LIBH5FD_DSM_VERSION ${H5FDdsm_PACKAGE_VERSION_MAJOR})
    ELSE (WIN32)
      SET (LIBH5FD_DSM_VERSION ${H5FDdsm_PACKAGE_VERSION})
    ENDIF (WIN32)
    SET_TARGET_PROPERTIES (${libtarget} PROPERTIES VERSION ${LIBH5FD_DSM_VERSION})
    SET_TARGET_PROPERTIES (${libtarget} PROPERTIES SOVERSION ${LIBH5FD_DSM_VERSION})
  ENDIF (BUILD_SHARED_LIBS)
ENDMACRO (SET_LIB_OPTIONS)

#-----------------------------------------------------------------------------
# To fix potential linker problems with mixed static/shared on linux
#-----------------------------------------------------------------------------
IF (NOT BUILD_SHARED_LIBS)
  IF (NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    ADD_DEFINITIONS(-DPIC)
  ENDIF (NOT WIN32)
ENDIF (NOT BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Find HDF5
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${H5FDdsm_SOURCE_DIR}/CMake/")
  FIND_PACKAGE(HDF5 REQUIRED)
ELSE (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  IF(NOT VTK_USE_SYSTEM_HDF5)
    IF(HDF5_CONFIG)
      INCLUDE("${HDF5_CONFIG}")
    ELSE(HDF5_CONFIG)
      set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${H5FDdsm_SOURCE_DIR}/CMake/")
      FIND_PACKAGE(HDF5 REQUIRED PATHS "${HDF5_DIR}")
    ENDIF(HDF5_CONFIG)
  ENDIF(NOT VTK_USE_SYSTEM_HDF5)
ENDIF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)

IF (NOT TARGET "hdf5")
#  MESSAGE(FATAL_ERROR "The Project requires HDF5")
ENDIF (NOT TARGET "hdf5")
IF (NOT HDF5_ENABLE_PARALLEL)
#  MESSAGE(FATAL_ERROR "The Project requires HDF5 to be compiled with HDF5_ENABLE_PARALLEL ON")
ENDIF (NOT HDF5_ENABLE_PARALLEL)
  
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})
IF(HDF5_VERSION_MAJOR)
#  MESSAGE("HDF5 version number reports as ${HDF5_VERSION_MAJOR}.${HDF5_VERSION_MINOR}")
  IF(HDF5_VERSION_MAJOR GREATER 1.8)
    SET(HDF5_GREATER_1_8 TRUE)
    ADD_DEFINITIONS(-DHDF_NEW_VFD)
  ENDIF(HDF5_VERSION_MAJOR GREATER 1.8)
ENDIF(HDF5_VERSION_MAJOR)


#-----------------------------------------------------------------------------
# Find MPI
#-----------------------------------------------------------------------------
FIND_PACKAGE(MPI REQUIRED)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
# MPI libraries are imported with HDF5

#-----------------------------------------------------------------------------
# Configure our module header file
#-----------------------------------------------------------------------------
CONFIGURE_FILE(
  ${H5FDdsm_SOURCE_DIR}/src/H5FDdsmConfig.h.in 
  ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
)

#-----------------------------------------------------------------------------
# Include all directories used by this source
#-----------------------------------------------------------------------------
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR}/h5dump)
INCLUDE_DIRECTORIES(${H5FDdsm_BINARY_DIR}/src)

#----------------------------
# Fortran
#----------------------------
MACRO (SET_FORTRAN_LINK_OPTIONS target)
  IF (WIN32 AND MSVC)
    IF (BUILD_SHARED_LIBS)
      SET_TARGET_PROPERTIES (${target}
          PROPERTIES
              COMPILE_FLAGS "/dll"
              LINK_FLAGS "/SUBSYSTEM:CONSOLE"
      )
    ELSE (BUILD_SHARED_LIBS)
      SET_TARGET_PROPERTIES (${target}
          PROPERTIES
              COMPILE_FLAGS "/libs:static /threads "
              LINK_FLAGS "/SUBSYSTEM:CONSOLE /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCMTD ${addlinkflags}"
      )
    ENDIF (BUILD_SHARED_LIBS)
  ENDIF (WIN32 AND MSVC)
  SET_TARGET_PROPERTIES (${target} PROPERTIES LINKER_LANGUAGE Fortran)
ENDMACRO (SET_FORTRAN_LINK_OPTIONS)

#-----------------------------------------------------------------------------
# Specify project source files
#-----------------------------------------------------------------------------
SET(H5FDdsmSources
  src/H5FDdsm.cxx
  src/H5FDdsmBuffer.cxx
  src/H5FDdsmComm.cxx
  src/H5FDdsmCommMpi.cxx
  src/H5FDdsmCommMpiRma.cxx
  src/H5FDdsmCommSocket.cxx
  src/H5FDdsmDriver.cxx
  src/H5FDdsmIniFile.cxx
  src/H5FDdsmObject.cxx
  src/H5FDdsmMsg.cxx
  src/H5FDdsmSocket.cxx
  src/H5FDdsmStorage.cxx
  src/H5FDdsmStorageMpiRma.cxx
  src/H5FDdsmManager.cxx
  src/H5FDdsmDump.cxx
  src/H5FDdsmAddressMapper.cxx
  h5dump/h5dump.cxx
  h5dump/h5tools.cxx
  h5dump/h5tools_ref.cxx
  h5dump/h5tools_str.cxx
  h5dump/h5tools_type.cxx
  h5dump/h5tools_utils.cxx
  h5dump/h5trav.cxx
)

IF (H5FD_DSM_BUILD_STEERING)
  SET(H5FDdsmSources
    src/H5FDdsmSteerer.cxx
    src/H5FDdsmSteering.cxx
    ${H5FDdsmSources}
  )
ENDIF (H5FD_DSM_BUILD_STEERING)

IF (H5FD_DSM_BUILD_DMAPP)
  SET(H5FDdsmSources
    src/H5FDdsmCommDmapp.cxx
    ${H5FDdsmSources}
  )
ENDIF (H5FD_DSM_BUILD_DMAPP)

#-----------------------------------------------------------------------------
# Create the library
#-----------------------------------------------------------------------------
ADD_LIBRARY(H5FDdsm ${H5FDdsmSources})

TARGET_LINK_LIBRARIES(H5FDdsm
  ${H5FD_DSM_LIB_DEPENDENCIES}
)

IF(WIN32)
  TARGET_LINK_LIBRARIES(H5FDdsm
    wsock32 ws2_32
  )
ENDIF(WIN32)

SET_LIB_OPTIONS(H5FDdsm)

#-----------------------------------------------------------------------------
# Option to build Fortran bindings
# We will use the name mangling and type checks from the HDF5 project
#-----------------------------------------------------------------------------
OPTION (H5FD_DSM_BUILD_FORTRAN "Build FORTRAN bindings." OFF)
IF (H5FD_DSM_BUILD_FORTRAN)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR_FORTRAN})
  ADD_SUBDIRECTORY (${H5FDdsm_SOURCE_DIR}/fortran ${PROJECT_BINARY_DIR}/fortran)
ENDIF (H5FD_DSM_BUILD_FORTRAN)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
OPTION(BUILD_TESTING "Build H5FDdsm Complete Testing" ON)

IF(NOT H5FD_DSM_EXTERNALLY_CONFIGURED AND BUILD_TESTING)
  ENABLE_TESTING()
  INCLUDE(CTest)
  ADD_SUBDIRECTORY(Testing)
ENDIF(NOT H5FD_DSM_EXTERNALLY_CONFIGURED AND BUILD_TESTING)

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
SET(H5FDdsmHeaders
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsm.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmManager.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmBuffer.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmDriver.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmObject.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmComm.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommSocket.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommMpi.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommMpiRma.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmAddressMapper.h
  ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
)

IF (H5FD_DSM_BUILD_STEERING)
  SET(H5FDdsmHeaders
    ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmSteering.h
    ${H5FDdsmHeaders}
  )
ENDIF (H5FD_DSM_BUILD_STEERING)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
INSTALL (
  FILES
    ${H5FDdsmHeaders}
  DESTINATION
    ${H5FD_DSM_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install 
#-----------------------------------------------------------------------------
INSTALL (
  TARGETS
    H5FDdsm
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${H5FD_DSM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${H5FD_DSM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${H5FD_DSM_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
INSTALL (
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
  FILE
    h5fddsm-targets.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
EXPORT (
  TARGETS
    H5FDdsm
  FILE
    h5fddsm-targets.cmake
)
ENDIF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
 
#-----------------------------------------------------------------------------
# Configure the HDF5-config.cmake file for the build directory
#-----------------------------------------------------------------------------
SET (H5FD_DSM_INCLUDES_BUILD_TIME
  ${H5FDdsm_SOURCE_DIR}/src
  ${H5FDdsm_SOURCE_DIR}/h5dump
)

CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.build.in 
  ${H5FDdsm_BINARY_DIR}/h5fddsm-config.cmake @ONLY
)

#-----------------------------------------------------------------------------
# Configure the h5fddsm-config.cmake file for the install directory
#-----------------------------------------------------------------------------
CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.install.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake @ONLY
)
INSTALL (
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Configure the hdf5-config-version .cmake file for the install directory
#-----------------------------------------------------------------------------
CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config-version.cmake.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake @ONLY
)
INSTALL (
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Debugging below here
#-----------------------------------------------------------------------------

