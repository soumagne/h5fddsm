cmake_minimum_required(VERSION 2.8)
project(H5FDdsm C CXX)

#-----------------------------------------------------------------------------
# Variable naming convention
#-----------------------------------------------------------------------------

# Inside CMakeLists files for the project, variable names use H5FDdsm_XXX
#
# Variables exported to other projects and user visible options are H5FD_DSM_XXX
#

#-----------------------------------------------------------------------------
# Version information 
#-----------------------------------------------------------------------------
set(H5FDdsm_VERS_MAJOR   "0")
set(H5FDdsm_VERS_MINOR   "9")
set(H5FDdsm_VERS_RELEASE "7")
set(H5FDdsm_PACKAGE "h5fddsm")
set(H5FDdsm_PACKAGE_NAME "H5FDdsm")
set(H5FDdsm_PACKAGE_VERSION "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}.${H5FDdsm_VERS_RELEASE}")
set(H5FDdsm_PACKAGE_VERSION_MAJOR "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}")
set(H5FDdsm_PACKAGE_VERSION_MINOR "${H5FDdsm_VERS_RELEASE}")
set(H5FDdsm_PACKAGE_STRING "${H5FDdsm_PACKAGE_NAME} ${H5FDdsm_PACKAGE_VERSION}")
set(H5FDdsm_PACKAGE_TARNAME "h5fddsm")

#-----------------------------------------------------------------------------
# Setup install and output Directories
#-----------------------------------------------------------------------------
if(NOT H5FD_DSM_INSTALL_BIN_DIR)
  set(H5FD_DSM_INSTALL_BIN_DIR bin)
endif(NOT H5FD_DSM_INSTALL_BIN_DIR)
if(NOT H5FD_DSM_INSTALL_LIB_DIR)
  set(H5FD_DSM_INSTALL_LIB_DIR lib)
endif(NOT H5FD_DSM_INSTALL_LIB_DIR)
if(NOT H5FD_DSM_INSTALL_INCLUDE_DIR)
  set(H5FD_DSM_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
endif(NOT H5FD_DSM_INSTALL_INCLUDE_DIR)
if(NOT H5FD_DSM_INSTALL_DATA_DIR)
  set(H5FD_DSM_INSTALL_DATA_DIR share)
endif(NOT H5FD_DSM_INSTALL_DATA_DIR)

if(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
  )
  set(EXECUTABLE_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
  )
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
  )
  set(CMAKE_Fortran_MODULE_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin/fortran CACHE PATH "Single Directory for all fortran modules."
  )
  set(H5FD_DSM_LIB_DEPENDENCIES 
    hdf5 
  )
endif(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)

#-----------------------------------------------------------------------------
# Targets built within this project are exported at Install time for use
# by other projects using FindH5FDdsm. 
#-----------------------------------------------------------------------------
if(NOT H5FD_DSM_EXPORTED_TARGETS)
  set(H5FD_DSM_EXPORTED_TARGETS "H5FDdsm-targets")
endif(NOT H5FD_DSM_EXPORTED_TARGETS)

#-----------------------------------------------------------------------------
# Choose static or shared libraries.
#-----------------------------------------------------------------------------
option(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(H5FDdsm_BUILD_SHARED_LIBS 1)
  set(H5FDdsm_LIBTYPE SHARED)
else(BUILD_SHARED_LIBS)
  set(H5FDdsm_BUILD_SHARED_LIBS 0)
  set(H5FDdsm_LIBTYPE STATIC)
endif(BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Choose to use thread debug or not.
#-----------------------------------------------------------------------------
option(H5FD_DSM_DEBUG_SYNCED "Enable synchronization of debug messages using thread locking." OFF)

#-----------------------------------------------------------------------------
# Choose to enable global debug or not.
#-----------------------------------------------------------------------------
option(H5FD_DSM_DEBUG_GLOBAL "Turn on all debug messages." OFF)

#-----------------------------------------------------------------------------
# Choose to build steering API or not.
#-----------------------------------------------------------------------------
option(H5FD_DSM_BUILD_STEERING "Build H5FDdsm steering functionalities." OFF)
if(H5FD_DSM_BUILD_STEERING)
  set(H5FD_DSM_HAVE_STEERING TRUE)
endif(H5FD_DSM_BUILD_STEERING)

#-----------------------------------------------------------------------------
# Choose to build CRAY DMAPP/UGNI communicators or not.
#-----------------------------------------------------------------------------
option(H5FD_DSM_USE_CRAY_DMAPP "Use Cray DMAPP inter-communicator." OFF)
if(H5FD_DSM_USE_CRAY_DMAPP)
  #
  find_path(CRAY_UGNI_INCLUDE_DIR gni_pub.h)
  if(CRAY_UGNI_INCLUDE_DIR)
    include_directories(${CRAY_UGNI_INCLUDE_DIR})
  endif(CRAY_UGNI_INCLUDE_DIR)
  #
  find_path(CRAY_DMAPP_INCLUDE_DIR dmapp.h)
  if(CRAY_DMAPP_INCLUDE_DIR)
    include_directories(${CRAY_DMAPP_INCLUDE_DIR})
  endif(CRAY_DMAPP_INCLUDE_DIR)
  #
  find_library(CRAY_DMAPP_LIBRARY NAMES dmapp)
  if(CRAY_DMAPP_LIBRARY)
    set(H5FD_DSM_LIB_DEPENDENCIES ${H5FD_DSM_LIB_DEPENDENCIES} ${CRAY_DMAPP_LIBRARY})
  endif(CRAY_DMAPP_LIBRARY)
  #
  if(CRAY_UGNI_INCLUDE_DIR AND CRAY_DMAPP_INCLUDE_DIR AND CRAY_DMAPP_LIBRARY)
    set(H5FD_DSM_HAVE_DMAPP TRUE)
  endif(CRAY_UGNI_INCLUDE_DIR AND CRAY_DMAPP_INCLUDE_DIR AND CRAY_DMAPP_LIBRARY)
  #
endif(H5FD_DSM_USE_CRAY_DMAPP)
#
option(H5FD_DSM_USE_CRAY_UGNI "Use Cray UGNI inter-communicator." OFF)
if(H5FD_DSM_USE_CRAY_UGNI)
    #
    find_path(CRAY_UGNI_INCLUDE_DIR gni_pub.h)
    if(CRAY_UGNI_INCLUDE_DIR)
      include_directories(${CRAY_UGNI_INCLUDE_DIR})
    endif(CRAY_UGNI_INCLUDE_DIR)
    if(CRAY_UGNI_INCLUDE_DIR)
      set(H5FD_DSM_HAVE_UGNI TRUE)
    endif(CRAY_UGNI_INCLUDE_DIR)
    #
endif(H5FD_DSM_USE_CRAY_UGNI)

#-------------------------------------------------------------------------------
macro(set_lib_options libtarget libname libtype)
  if(${libtype} MATCHES "SHARED")
    if(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "${libname}")
      set(LIB_DEBUG_NAME "${libname}_D")
      set(LIB_DSM_VERSION ${H5FDdsm_PACKAGE_VERSION_MAJOR})
    else(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "${libname}")
      set(LIB_DEBUG_NAME "${libname}_debug")
      set(LIB_DSM_VERSION ${H5FDdsm_PACKAGE_VERSION})
    endif(WIN32 AND NOT MINGW)
  else(${libtype} MATCHES "SHARED")
    if(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "lib${libname}")
      set(LIB_DEBUG_NAME "lib${libname}_D")
    else(WIN32 AND NOT MINGW)
      # if the generator supports configuration types or if the CMAKE_BUILD_TYPE has a value
      if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
        set(LIB_RELEASE_NAME "${libname}")
        set(LIB_DEBUG_NAME "${libname}_debug")
      else(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
        set(LIB_RELEASE_NAME "lib${libname}")
        set(LIB_DEBUG_NAME "lib${libname}_debug")
      endif(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
    endif(WIN32 AND NOT MINGW)
  endif(${libtype} MATCHES "SHARED")
  
  set_target_properties(${libtarget}
      PROPERTIES
      DEBUG_OUTPUT_NAME          ${LIB_DEBUG_NAME}
      RELEASE_OUTPUT_NAME        ${LIB_RELEASE_NAME}
      MINSIZEREL_OUTPUT_NAME     ${LIB_RELEASE_NAME}
      RELWITHDEBINFO_OUTPUT_NAME ${LIB_RELEASE_NAME}
      VERSION                    ${LIB_DSM_VERSION}
      SOVERSION                  ${LIB_DSM_VERSION}
  )
  
  #----- Use MSVC Naming conventions for Shared Libraries
  if(MINGW AND ${libtype} MATCHES "SHARED")
    set_target_properties(${libtarget}
        PROPERTIES
        IMPORT_SUFFIX ".lib"
        IMPORT_PREFIX ""
        PREFIX ""
    )
  endif(MINGW AND ${libtype} MATCHES "SHARED")
endmacro(set_lib_options)
  
#-----------------------------------------------------------------------------
# To fix potential linker problems with mixed static/shared on linux
#-----------------------------------------------------------------------------
if(NOT BUILD_SHARED_LIBS)
  if(NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    add_definitions(-DPIC)
  endif(NOT WIN32)
endif(NOT BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Find HDF5
#-----------------------------------------------------------------------------
if(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${H5FDdsm_SOURCE_DIR}/CMake/")
  find_package(HDF5 REQUIRED)
else(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  if(NOT VTK_USE_SYSTEM_HDF5)
    if(HDF5_CONFIG)
      include("${HDF5_CONFIG}")
    else(HDF5_CONFIG)
      set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${H5FDdsm_SOURCE_DIR}/CMake/")
      find_package(HDF5 REQUIRED PATHS "${HDF5_DIR}")
    endif(HDF5_CONFIG)
  endif(NOT VTK_USE_SYSTEM_HDF5)
endif(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)

if(NOT TARGET "hdf5")
#  MESSAGE(FATAL_ERROR "The Project requires HDF5")
endif(NOT TARGET "hdf5")
if(NOT HDF5_ENABLE_PARALLEL)
#  MESSAGE (FATAL_ERROR "The Project requires HDF5 to be compiled with HDF5_ENABLE_PARALLEL ON")
endif(NOT HDF5_ENABLE_PARALLEL)
  
include_directories(${HDF5_INCLUDE_DIR})
if(HDF5_VERSION_MAJOR)
#  MESSAGE ("HDF5 version number reports as ${HDF5_VERSION_MAJOR}.${HDF5_VERSION_MINOR}")
  if(HDF5_VERSION_MAJOR GREATER 1.8)
    set(HDF5_GREATER_1_8 TRUE)
    add_definitions(-DHDF_NEW_VFD)
  endif(HDF5_VERSION_MAJOR GREATER 1.8)
endif(HDF5_VERSION_MAJOR)


#-----------------------------------------------------------------------------
# Find MPI
#-----------------------------------------------------------------------------
find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})
# MPI libraries are imported with HDF5

#-----------------------------------------------------------------------------
# Configure our module header file
#-----------------------------------------------------------------------------
configure_file(
  ${H5FDdsm_SOURCE_DIR}/src/H5FDdsmConfig.h.in 
  ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
)

#-----------------------------------------------------------------------------
# Include all directories used by this source
#-----------------------------------------------------------------------------
include_directories(${H5FDdsm_SOURCE_DIR}/src)
include_directories(${H5FDdsm_SOURCE_DIR}/h5dump)
include_directories(${H5FDdsm_BINARY_DIR}/src)

#----------------------------
# Fortran
#----------------------------
macro(set_fortran_link_options target)
  if(WIN32 AND MSVC)
    if(BUILD_SHARED_LIBS)
      set_target_properties(${target}
          PROPERTIES
              COMPILE_FLAGS "/dll"
              LINK_FLAGS "/SUBSYSTEM:CONSOLE"
      )
    else(BUILD_SHARED_LIBS)
      set_target_properties(${target}
          PROPERTIES
              COMPILE_FLAGS "/libs:static /threads "
              LINK_FLAGS "/SUBSYSTEM:CONSOLE /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCMTD ${addlinkflags}"
      )
    endif(BUILD_SHARED_LIBS)
  endif(WIN32 AND MSVC)
  set_target_properties(${target} PROPERTIES LINKER_LANGUAGE Fortran)
endmacro(set_fortran_link_options)

#-----------------------------------------------------------------------------
# Specify project source files
#-----------------------------------------------------------------------------
set(H5FDdsmSources
  src/H5FDdsm.cxx
  src/H5FDdsmBuffer.cxx
  src/H5FDdsmComm.cxx
  src/H5FDdsmCommMpi.cxx
  src/H5FDdsmCommMpiRma.cxx
  src/H5FDdsmCommSocket.cxx
  src/H5FDdsmDriver.cxx
  src/H5FDdsmIniFile.cxx
  src/H5FDdsmObject.cxx
  src/H5FDdsmMsg.cxx
  src/H5FDdsmSocket.cxx
  src/H5FDdsmStorage.cxx
  src/H5FDdsmStorageMpi.cxx
  src/H5FDdsmManager.cxx
  src/H5FDdsmDump.cxx
  src/H5FDdsmAddressMapper.cxx
  h5dump/h5dump.cxx
  h5dump/h5tools.cxx
  h5dump/h5tools_ref.cxx
  h5dump/h5tools_str.cxx
  h5dump/h5tools_type.cxx
  h5dump/h5tools_utils.cxx
  h5dump/h5trav.cxx
)

if(H5FD_DSM_BUILD_STEERING)
  set(H5FDdsmSources
    src/H5FDdsmSteerer.cxx
    src/H5FDdsmSteering.cxx
    ${H5FDdsmSources}
  )
endif(H5FD_DSM_BUILD_STEERING)

if(H5FD_DSM_USE_CRAY_DMAPP)
  set(H5FDdsmSources
    src/H5FDdsmCommDmapp.cxx
    ${H5FDdsmSources}
  )
endif(H5FD_DSM_USE_CRAY_DMAPP)

if(H5FD_DSM_USE_CRAY_UGNI)
  set(H5FDdsmSources
    src/H5FDdsmCommUGni.cxx
    ${H5FDdsmSources}
  )
endif(H5FD_DSM_USE_CRAY_UGNI)

#-----------------------------------------------------------------------------
# Create the library
#-----------------------------------------------------------------------------
add_library(H5FDdsm ${H5FDdsmSources})

target_link_libraries(H5FDdsm
  ${H5FD_DSM_LIB_DEPENDENCIES}
)

if(WIN32)
  target_link_libraries(H5FDdsm
    wsock32 ws2_32
  )
endif(WIN32)

set_lib_options(H5FDdsm "H5FDdsm" ${H5FDdsm_LIBTYPE})

#-----------------------------------------------------------------------------
# Option to build Fortran bindings
# We will use the name mangling and type checks from the HDF5 project
#-----------------------------------------------------------------------------
option(H5FD_DSM_BUILD_FORTRAN "Build FORTRAN bindings." OFF)
if(H5FD_DSM_BUILD_FORTRAN)
  include_directories(${HDF5_INCLUDE_DIR_FORTRAN})
  add_subdirectory(${H5FDdsm_SOURCE_DIR}/fortran ${PROJECT_BINARY_DIR}/fortran)
endif(H5FD_DSM_BUILD_FORTRAN)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
option(BUILD_TESTING "Build H5FDdsm Complete Testing" ON)

if(NOT H5FD_DSM_EXTERNALLY_CONFIGURED AND BUILD_TESTING)
  enable_testing()
  include(CTest)
  add_subdirectory(Testing)
endif(NOT H5FD_DSM_EXTERNALLY_CONFIGURED AND BUILD_TESTING)

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(H5FDdsmHeaders
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsm.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmManager.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmBuffer.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmDriver.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmObject.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmComm.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommSocket.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommMpi.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmCommMpiRma.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmAddressMapper.h
  ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
)

if(H5FD_DSM_BUILD_STEERING)
  set(H5FDdsmHeaders
    ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmSteering.h
    ${H5FDdsmHeaders}
  )
endif(H5FD_DSM_BUILD_STEERING)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${H5FDdsmHeaders}
  DESTINATION
    ${H5FD_DSM_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install 
#-----------------------------------------------------------------------------
install(
  TARGETS
    H5FDdsm
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${H5FD_DSM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${H5FD_DSM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${H5FD_DSM_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
  FILE
    h5fddsm-targets.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
EXPORT (
  TARGETS
    H5FDdsm
  FILE
    h5fddsm-targets.cmake
)
endif(NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
 
#-----------------------------------------------------------------------------
# Configure the HDF5-config.cmake file for the build directory
#-----------------------------------------------------------------------------
set(H5FD_DSM_INCLUDES_BUILD_TIME
  ${H5FDdsm_SOURCE_DIR}/src
  ${H5FDdsm_SOURCE_DIR}/h5dump
)

configure_file(
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.build.in 
  ${H5FDdsm_BINARY_DIR}/h5fddsm-config.cmake @ONLY
)

#-----------------------------------------------------------------------------
# Configure the h5fddsm-config.cmake file for the install directory
#-----------------------------------------------------------------------------
configure_file(
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.install.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake @ONLY
)
install(
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Configure the hdf5-config-version .cmake file for the install directory
#-----------------------------------------------------------------------------
configure_file(
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config-version.cmake.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake @ONLY
)
install(
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake
  DESTINATION
    ${H5FD_DSM_INSTALL_DATA_DIR}/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Debugging below here
#-----------------------------------------------------------------------------
