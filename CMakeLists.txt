cmake_minimum_required (VERSION 2.8)
PROJECT (H5FDdsm C CXX)

#-----------------------------------------------------------------------------
# Version information 
#-----------------------------------------------------------------------------
SET (H5FDdsm_VERS_MAJOR   "1")
SET (H5FDdsm_VERS_MINOR   "0")
SET (H5FDdsm_VERS_RELEASE "0")
SET (H5FDdsm_PACKAGE "h5fddsm")
SET (H5FDdsm_PACKAGE_NAME "H5FDdsm")
SET (H5FDdsm_PACKAGE_VERSION "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}.${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_VERSION_MAJOR "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}")
SET (H5FDdsm_PACKAGE_VERSION_MINOR "${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_STRING "${H5FDdsm_PACKAGE_NAME} ${H5FDdsm_PACKAGE_VERSION}")
SET (H5FDdsm_PACKAGE_TARNAME "h5fddsm")

#-----------------------------------------------------------------------------
# Setup output Directories
#-----------------------------------------------------------------------------
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
)
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
)
SET (CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin/fortran CACHE PATH "Single Directory for all fortran modules."
)

#-----------------------------------------------------------------------------
# Targets built within this project are exported at Install time for use
# by other projects using FindH5FDdsm. 
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXPORTED_TARGETS)
  SET (H5FD_DSM_EXPORTED_TARGETS "H5FDdsm-targets")
ENDIF (NOT H5FD_DSM_EXPORTED_TARGETS)

#-----------------------------------------------------------------------------
# Choose static or shared libraries.
#-----------------------------------------------------------------------------
OPTION(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
IF(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 1)
ELSE(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 0)
ENDIF(BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# To fix potential linker problems with mixed static/shared/debug/release
# version of the runtime libraries under MSVC, set flags accordingly
#-----------------------------------------------------------------------------
IF (BUILD_SHARED_LIBS)
  IF (MSVC)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MT")
        STRING (REGEX REPLACE "/MT" "/MD" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MT")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ELSE (BUILD_SHARED_LIBS)
  IF (NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    ADD_DEFINITIONS(-DPIC)
  ENDIF (NOT WIN32)
  IF (MSVC)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MD")
        STRING (REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MD")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ENDIF (BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Find HDF5
#-----------------------------------------------------------------------------
FIND_PACKAGE(HDF5 "1.8.5" REQUIRED NO_MODULE PATHS "$ENV{ProgramFiles}/HDF5")
MESSAGE("HDF5_INCLUDE_DIR ${HDF5_INCLUDE_DIR}")
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})

#-----------------------------------------------------------------------------
# Find MPI
#-----------------------------------------------------------------------------
INCLUDE( ${CMAKE_CURRENT_SOURCE_DIR}/CMake/FindMPI.cmake)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
ADD_DEFINITIONS(-DMPICH_SKIP_MPICXX)

#-----------------------------------------------------------------------------
# Find and Use Boost for threads used in test send/receive on win32
#-----------------------------------------------------------------------------
IF (WIN32)
  SET(Boost_DEBUG ON)
  SET(Boost_ADDITIONAL_VERSIONS "1.39" "1.39.0" "1.40" "1.40.0")
  SET(BOOST_ROOT "C:/Program Files/Boost")
  SET(Boost_USE_STATIC_LIBS   ON)
  SET(Boost_USE_MULTITHREADED ON)
  FIND_PACKAGE(Boost 1.38.0 COMPONENTS thread) 

  IF(Boost_FOUND)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
    #MESSAGE(${Boost_INCLUDE_DIRS})
    ADD_DEFINITIONS(-DHAVE_BOOST_THREADS)
    LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
  ENDIF(Boost_FOUND)
ENDIF (WIN32)

#-----------------------------------------------------------------------------
# Configure our module header file
#-----------------------------------------------------------------------------
CONFIGURE_FILE(
  ${H5FDdsm_SOURCE_DIR}/H5FDdsmConfig.h.in 
  ${H5FDdsm_BINARY_DIR}/H5FDdsmConfig.h
)

#-----------------------------------------------------------------------------
# Include all directories used by this source
#-----------------------------------------------------------------------------
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR})
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR}/h5dump)
INCLUDE_DIRECTORIES(${H5FDdsm_BINARY_DIR})

#-----------------------------------------------
# Setup some convenience flags depending on machine
#-----------------------------------------------
SET(COMPUTERNAME $ENV{COMPUTERNAME})
IF(COMPUTERNAME)
  MESSAGE("Setting computername #DEFINE to MACHINE_$ENV{COMPUTERNAME}")
  ADD_DEFINITIONS(-DMACHINE_$ENV{COMPUTERNAME})
  IF ("${COMPUTERNAME}" MATCHES "AGNO")
    ADD_DEFINITIONS(-DH5FD_DEBUG_WITH_THREADS)
  ENDIF ("${COMPUTERNAME}" MATCHES "AGNO") 
ENDIF(COMPUTERNAME)

#-----------------------------------------------------------------------------
# Specify project source files
#-----------------------------------------------------------------------------
SET(H5FDdsmSources
  H5FDdsm.cxx
  H5FDdsmBuffer.cxx
  H5FDdsmComm.cxx
  H5FDdsmCommMpi.cxx
  H5FDdsmCommSocket.cxx
  H5FDdsmDriver.cxx
  H5FDdsmIniFile.cxx
  H5FDdsmObject.cxx
  H5FDdsmMsg.cxx
  H5FDdsmSocket.cxx
  H5FDdsmStorage.cxx
  #
  # Utility classes which make life easier (especially testing etc)
  #
  H5FDdsmManager.cxx
  H5FDdsmDump
  h5dump/h5dump.cxx
  h5dump/h5tools.cxx
  h5dump/h5tools_ref.cxx
  h5dump/h5tools_str.cxx
  h5dump/h5tools_type.cxx
  h5dump/h5tools_utils.cxx
  h5dump/h5trav.cxx
)

#-----------------------------------------------------------------------------
# Create the library
#-----------------------------------------------------------------------------
ADD_LIBRARY(H5FDdsm ${H5FDdsmSources})

TARGET_LINK_LIBRARIES(H5FDdsm
  hdf5
  ${MPI_LIBRARY}
) 

IF(WIN32)
  TARGET_LINK_LIBRARIES(H5FDdsm
    wsock32
  )  
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ENDIF(WIN32)

#-----------------------------------------------------------------------------
# Option to build Fortran bindings
# We will use the name mangling and type checks from the HDF5 project
#-----------------------------------------------------------------------------
OPTION (H5FD_DSM_BUILD_FORTRAN "Build FORTRAN bindings" OFF)
IF (H5FD_DSM_BUILD_FORTRAN)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR_FORTRAN})
  ADD_SUBDIRECTORY (${H5FDdsm_SOURCE_DIR}/fortran ${PROJECT_BINARY_DIR}/fortran)
ENDIF (H5FD_DSM_BUILD_FORTRAN)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_BUILD_TESTING "Build Testing code" ON)

IF(H5FD_DSM_BUILD_TESTING)
 ADD_SUBDIRECTORY(Testing)
ENDIF(H5FD_DSM_BUILD_TESTING)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
INSTALL (
  FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/H5FDdsm.h
    ${H5FDdsm_BINARY_DIR}/H5FDdsmConfig.h
  DESTINATION
    include
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install 
#-----------------------------------------------------------------------------
INSTALL (
  TARGETS
    H5FDdsm
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  LIBRARY DESTINATION lib 
  ARCHIVE DESTINATION lib 
  RUNTIME DESTINATION bin 
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
INSTALL (
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  DESTINATION
    lib/cmake//h5fddsm-${H5FDdsm_PACKAGE_VERSION}
  FILE
    H5FDdsm-targets.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
EXPORT (
  TARGETS
    H5FDdsm ${H5FD_DSM_LIB_DEPENDENCIES}
  FILE
    H5FDdsm-targets.cmake
)
 
#-----------------------------------------------------------------------------
# Configure the HDF5-config.cmake file for the build directory
#-----------------------------------------------------------------------------
SET (H5FD_DSM_INCLUDES_BUILD_TIME
  ${H5FDdsm_SOURCE_DIR}
  ${H5FDdsm_SOURCE_DIR}/h5dump
)
SET (H5FD_DSM_VERSION_STRING "1")
SET (H5FD_DSM_VERSION_MAJOR  "0")
SET (H5FD_DSM_VERSION_MINOR  "0")

CONFIGURE_FILE (
    ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.build.in 
    ${H5FDdsm_BINARY_DIR}/H5FDdsm-config.cmake @ONLY
)

#-----------------------------------------------------------------------------
# Configure the H5FDdsm-config.cmake file for the install directory
#-----------------------------------------------------------------------------
INSTALL (CODE
    "SET (H5FD_DSM_INSTALL_SKIP_TARGETS 1)
     INCLUDE (${H5FDdsm_BINARY_DIR}/H5FDdsm-config.cmake) 
     CONFIGURE_FILE (
         \"${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.install.in\" 
         \"${CMAKE_INSTALL_PREFIX}/lib/H5FDdsm-config.cmake\" @ONLY
     )
    "
)

#-----------------------------------------------------------------------------
# Debugging below here
#-----------------------------------------------------------------------------
#MESSAGE("MPI_LIBRARY is ${MPI_LIBRARY}, MPI dir is ${MPI_INCLUDE_PATH}, HDF5 dir is ${HDF5_INCLUDE_DIR}")

