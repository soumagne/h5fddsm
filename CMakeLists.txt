cmake_minimum_required (VERSION 2.8)
PROJECT (H5FDdsm C CXX)

#-----------------------------------------------------------------------------
# Variable naming convention
#-----------------------------------------------------------------------------

# Inside CMakeLists files for the project, variable names use H5FDdsm_XXX
#
# Variables exported to other projects and user visible options are H5FD_DSM_XXX
#

#-----------------------------------------------------------------------------
# Version information 
#-----------------------------------------------------------------------------
SET (H5FDdsm_VERS_MAJOR   "0")
SET (H5FDdsm_VERS_MINOR   "9")
SET (H5FDdsm_VERS_RELEASE "4")
SET (H5FDdsm_PACKAGE "h5fddsm")
SET (H5FDdsm_PACKAGE_NAME "H5FDdsm")
SET (H5FDdsm_PACKAGE_VERSION "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}.${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_VERSION_MAJOR "${H5FDdsm_VERS_MAJOR}.${H5FDdsm_VERS_MINOR}")
SET (H5FDdsm_PACKAGE_VERSION_MINOR "${H5FDdsm_VERS_RELEASE}")
SET (H5FDdsm_PACKAGE_STRING "${H5FDdsm_PACKAGE_NAME} ${H5FDdsm_PACKAGE_VERSION}")
SET (H5FDdsm_PACKAGE_TARNAME "h5fddsm")

#-----------------------------------------------------------------------------
# Setup output Directories
#-----------------------------------------------------------------------------
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
)
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
)
SET (CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin/fortran CACHE PATH "Single Directory for all fortran modules."
)

#-----------------------------------------------------------------------------
# Targets built within this project are exported at Install time for use
# by other projects using FindH5FDdsm. 
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXPORTED_TARGETS)
  SET (H5FD_DSM_EXPORTED_TARGETS "H5FDdsm-targets")
ENDIF (NOT H5FD_DSM_EXPORTED_TARGETS)

#-----------------------------------------------------------------------------
# Choose static or shared libraries.
#-----------------------------------------------------------------------------
OPTION(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
IF(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 1)
ELSE(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 0)
ENDIF(BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# To fix potential linker problems with mixed static/shared on linux
#-----------------------------------------------------------------------------
IF (NOT BUILD_SHARED_LIBS)
  IF (NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    ADD_DEFINITIONS(-DPIC)
  ENDIF (NOT WIN32)
ENDIF (NOT BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Find HDF5
#-----------------------------------------------------------------------------
IF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  FIND_PACKAGE(HDF5 "1.8.5" REQUIRED NO_MODULE PATHS "$ENV{ProgramFiles}/HDF5")
ELSE (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
  FIND_PACKAGE(HDF5 REQUIRED NO_MODULE PATHS "${HDF5_DIR}")
ENDIF (NOT H5FD_DSM_EXTERNALLY_CONFIGURED)
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})

#-----------------------------------------------------------------------------
# Find MPI
#-----------------------------------------------------------------------------
INCLUDE( ${CMAKE_CURRENT_SOURCE_DIR}/CMake/FindMPI.cmake)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})

#-----------------------------------------------------------------------------
# Configure our module header file
#-----------------------------------------------------------------------------
CONFIGURE_FILE(
  ${H5FDdsm_SOURCE_DIR}/src/H5FDdsmConfig.h.in 
  ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
)

#-----------------------------------------------------------------------------
# Include all directories used by this source
#-----------------------------------------------------------------------------
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${H5FDdsm_SOURCE_DIR}/h5dump)
INCLUDE_DIRECTORIES(${H5FDdsm_BINARY_DIR}/src)

#-----------------------------------------------------------------------------
# Linking against mpich2 libs on win32 causes trouble if we don't add some flags
#-----------------------------------------------------------------------------
MACRO (SET_LINK_OPTIONS target)
  IF (WIN32 AND MSVC)
    SET_TARGET_PROPERTIES (${target}
        PROPERTIES
            LINK_FLAGS_RELEASE "/NODEFAULTLIB:MSVCRT"
            LINK_FLAGS_DEBUG "/NODEFAULTLIB:MSVCRTD"
    ) 
  ENDIF (WIN32 AND MSVC)
ENDMACRO (SET_LINK_OPTIONS)
#----------------------------
# Fortran
#----------------------------
MACRO (SET_FORTRAN_LINK_OPTIONS target)
  SET_LINK_OPTIONS(target)
  SET_TARGET_PROPERTIES (${target} PROPERTIES LINKER_LANGUAGE Fortran)
ENDMACRO (SET_FORTRAN_LINK_OPTIONS)

#-----------------------------------------------------------------------------
# Force /MD instead of /MT and vice versa for win32/mpich2 compatibility
#-----------------------------------------------------------------------------
IF (BUILD_SHARED_LIBS)
  IF (MSVC)
    SET (CMAKE_MFC_FLAG 0)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MT")
        STRING (REGEX REPLACE "/MT" "/MD" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MT")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ELSE (BUILD_SHARED_LIBS)
  IF (MSVC)
    SET (CMAKE_MFC_FLAG 0)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MD")
        STRING (REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MD")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ENDIF (BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Specify project source files
#-----------------------------------------------------------------------------
SET(H5FDdsmSources
  src/H5FDdsm.cxx
  src/H5FDdsmBuffer.cxx
  src/H5FDdsmComm.cxx
  src/H5FDdsmCommMpi.cxx
  src/H5FDdsmCommSocket.cxx
  src/H5FDdsmDriver.cxx
  src/H5FDdsmIniFile.cxx
  src/H5FDdsmObject.cxx
  src/H5FDdsmMsg.cxx
  src/H5FDdsmSocket.cxx
  src/H5FDdsmStorage.cxx
  src/H5FDdsmManager.cxx
  src/H5FDdsmDump.cxx
  src/H5FDdsmSteerer.cxx
  src/H5FDdsmSteering.cxx
  h5dump/h5dump.cxx
  h5dump/h5tools.cxx
  h5dump/h5tools_ref.cxx
  h5dump/h5tools_str.cxx
  h5dump/h5tools_type.cxx
  h5dump/h5tools_utils.cxx
  h5dump/h5trav.cxx
)

#-----------------------------------------------------------------------------
# Create the library
#-----------------------------------------------------------------------------
ADD_LIBRARY(H5FDdsm ${H5FDdsmSources})

TARGET_LINK_LIBRARIES(H5FDdsm
  hdf5
  ${MPI_LIBRARY}
) 

IF(WIN32)
  TARGET_LINK_LIBRARIES(H5FDdsm
    wsock32
  )  
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ENDIF(WIN32)

#-----------------------------------------------------------------------------
# Option to build Fortran bindings
# We will use the name mangling and type checks from the HDF5 project
#-----------------------------------------------------------------------------
OPTION (H5FD_DSM_BUILD_FORTRAN "Build FORTRAN bindings" OFF)
IF (H5FD_DSM_BUILD_FORTRAN)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR_FORTRAN})
  ADD_SUBDIRECTORY (${H5FDdsm_SOURCE_DIR}/fortran ${PROJECT_BINARY_DIR}/fortran)
ENDIF (H5FD_DSM_BUILD_FORTRAN)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
OPTION(H5FD_DSM_BUILD_TESTING "Build Testing code" ON)

IF(H5FD_DSM_BUILD_TESTING)
 ADD_SUBDIRECTORY(Testing)
ENDIF(H5FD_DSM_BUILD_TESTING)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
INSTALL (
  FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsm.h
    ${CMAKE_CURRENT_SOURCE_DIR}/src/H5FDdsmSteering.h
    ${H5FDdsm_BINARY_DIR}/src/H5FDdsmConfig.h
  DESTINATION
    include
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install 
#-----------------------------------------------------------------------------
INSTALL (
  TARGETS
    H5FDdsm
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  LIBRARY DESTINATION lib 
  ARCHIVE DESTINATION lib 
  RUNTIME DESTINATION bin 
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
INSTALL (
  EXPORT
    ${H5FD_DSM_EXPORTED_TARGETS}
  DESTINATION
    lib/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
  FILE
    h5fddsm-targets.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
EXPORT (
  TARGETS
    H5FDdsm ${H5FD_DSM_LIB_DEPENDENCIES}
  FILE
    h5fddsm-targets.cmake
)
 
#-----------------------------------------------------------------------------
# Configure the HDF5-config.cmake file for the build directory
#-----------------------------------------------------------------------------
SET (H5FD_DSM_INCLUDES_BUILD_TIME
  ${H5FDdsm_SOURCE_DIR}/src
  ${H5FDdsm_SOURCE_DIR}/h5dump
)

CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.build.in 
  ${H5FDdsm_BINARY_DIR}/h5fddsm-config.cmake @ONLY
)

#-----------------------------------------------------------------------------
# Configure the h5fddsm-config.cmake file for the install directory
#-----------------------------------------------------------------------------
CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config.cmake.install.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake @ONLY
)
INSTALL (
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config.cmake
  DESTINATION
    lib/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Configure the hdf5-config-version .cmake file for the install directory
#-----------------------------------------------------------------------------
CONFIGURE_FILE (
  ${H5FDdsm_SOURCE_DIR}/CMake/H5FDdsm-config-version.cmake.in
  ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake @ONLY
)
INSTALL (
  FILES
    ${H5FDdsm_BINARY_DIR}/CMakeFiles/h5fddsm-config-version.cmake
  DESTINATION
    lib/cmake/h5fddsm-${H5FDdsm_PACKAGE_VERSION}
)

#-----------------------------------------------------------------------------
# Debugging below here
#-----------------------------------------------------------------------------

