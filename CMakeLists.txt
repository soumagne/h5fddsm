cmake_minimum_required (VERSION 2.8)
PROJECT (H5FDdsm C CXX)

#-----------------------------------------------------------------------------
# Setup output Directories
#-----------------------------------------------------------------------------
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
)
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
)
SET (CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin/fortran CACHE PATH "Single Directory for all fortran modules."
)

#-----------------------------------------------------------------------------
# Choose static or shared libraries.
#-----------------------------------------------------------------------------
OPTION(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
IF(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 1)
ELSE(BUILD_SHARED_LIBS)
  SET(H5FDdsm_BUILD_SHARED_LIBS 0)
ENDIF(BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# To fix potential linker problems with mixed static/shared/debug/release
# version of the runtime libraries under MSVC, set flags accordingly
#-----------------------------------------------------------------------------
IF (BUILD_SHARED_LIBS)
  IF (MSVC)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MT")
        STRING (REGEX REPLACE "/MT" "/MD" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MT")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ELSE (BUILD_SHARED_LIBS)
  IF (NOT WIN32)
    # should this be a user setting : Everyone uses it anyway ?
    ADD_DEFINITIONS(-DPIC)
  ENDIF (NOT WIN32)
  IF (MSVC)
    FOREACH (flag_var
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      IF (${flag_var} MATCHES "/MD")
        STRING (REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
      ENDIF (${flag_var} MATCHES "/MD")
    ENDFOREACH (flag_var)
  ENDIF (MSVC)
ENDIF (BUILD_SHARED_LIBS)

#-----------------------------------------------------------------------------
# Find HDF5
#-----------------------------------------------------------------------------
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/FindHDF5.cmake)
IF(NOT HDF5_FOUND)
  MESSAGE(FATAL_ERROR "This project requires HDF5")
ENDIF(NOT HDF5_FOUND)
  
IF (NOT HDF5_SOURCE_DIR)
  INCLUDE( ${HDF5_CONFIG_FILE} )
ENDIF  (NOT HDF5_SOURCE_DIR)
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})

#-----------------------------------------------------------------------------
# Find MPI
#-----------------------------------------------------------------------------
INCLUDE( ${CMAKE_CURRENT_SOURCE_DIR}/CMake/FindMPI.cmake)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
ADD_DEFINITIONS(-DMPICH_SKIP_MPICXX)

#-----------------------------------------------------------------------------
# Configure our module header file
#-----------------------------------------------------------------------------
CONFIGURE_FILE(
  ${H5FDdsm_SOURCE_DIR}/H5FDdsmConfig.h.in 
  ${H5FDdsm_BINARY_DIR}/H5FDdsmConfig.h
)

INCLUDE_DIRECTORIES(${H5FDdsm_BINARY_DIR})

#-----------------------------------------------------------------------------
# Define a user config path for the dsm ini file
#-----------------------------------------------------------------------------
SET(H5FDdsm_CONFIG_PATH $ENV{HOME} CACHE PATH "Path to the DSM configuration file")

#-----------------------------------------------------------------------------
# Specify project source files
#-----------------------------------------------------------------------------
SET(H5FDdsmSources
  H5FDdsm.cxx
  H5FDdsmBuffer.cxx
  H5FDdsmComm.cxx
  H5FDdsmCommMpi.cxx
  H5FDdsmCommSocket.cxx
  H5FDdsmDriver.cxx
  H5FDdsmIniFile.cxx
  H5FDdsmObject.cxx
  H5FDdsmMsg.cxx
  H5FDdsmSocket.cxx
  H5FDdsmStorage.cxx
)

#-----------------------------------------------------------------------------
# Create the library
#-----------------------------------------------------------------------------
ADD_LIBRARY(H5FDdsm ${H5FDdsmSources})

TARGET_LINK_LIBRARIES(H5FDdsm
  hdf5
  ${MPI_LIBRARY}
) 

IF(WIN32)
  TARGET_LINK_LIBRARIES(H5FDdsm
    wsock32
  )  
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ENDIF(WIN32)

#-----------------------------------------------------------------------------
# Option to build Fortran bindings
# We will use the name mangling and type checks from the HDF5 project
#-----------------------------------------------------------------------------
OPTION (BUILD_FORTRAN "Build FORTRAN bindings" OFF)
IF (BUILD_FORTRAN)
  ADD_SUBDIRECTORY (${H5FDdsm_SOURCE_DIR}/fortran ${PROJECT_BINARY_DIR}/fortran)
ENDIF (BUILD_FORTRAN)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
OPTION(BUILD_TESTING "Build Testing code" OFF)

IF(BUILD_TESTING)
 ADD_SUBDIRECTORY(Testing)
ENDIF(BUILD_TESTING)
 
#-----------------------------------------------------------------------------
# Debugging below here
#-----------------------------------------------------------------------------
#MESSAGE("MPI_LIBRARY is ${MPI_LIBRARY}, MPI dir is ${MPI_INCLUDE_PATH}, HDF5 dir is ${HDF5_INCLUDE_DIR}")
